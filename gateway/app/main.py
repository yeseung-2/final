# main.py (gateway) ‚Äî CORS Î≥¥Í∞ï Î≤ÑÏ†Ñ
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from starlette.responses import Response, JSONResponse
import httpx, os, logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("gateway")

app = FastAPI(title="MSA API Gateway", version="1.0.0")

# ===== CORS ÏÑ§Ï†ï =====
WHITELIST = {
            "https://eripotter.com",
        "https://www.eripotter.com",              # www ÎèÑÎ©îÏù∏ÎèÑ ÌóàÏö©
    "http://localhost:3000", "http://localhost:5173",  # Î°úÏª¨ Í∞úÎ∞ú
    # "https://sme-eripotter-com.vercel.app",     # Vercel ÌîÑÎ¶¨Î∑∞Î•º Ïì∞Î©¥ Ï£ºÏÑù Ìï¥Ï†ú
}

# ÎØ∏Îì§Ïõ®Ïñ¥(Í∏∞Î≥∏ Î∞©Ïñ¥Îßâ) - allow_originsÎäî ÎÑìÍ≤å ÎëêÎêò credentials Í≥†Î†§
app.add_middleware(
    CORSMiddleware,
    allow_origins=list(WHITELIST),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def cors_headers_for(request: Request):
    """ÏöîÏ≤≠ OriginÏù¥ ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏Ïóê ÏûàÏúºÎ©¥ Ìï¥Îãπ OriginÏùÑ Í∑∏ÎåÄÎ°ú Î∞òÌôò."""
    origin = request.headers.get("origin")
    if origin in WHITELIST:
        return {
            "Access-Control-Allow-Origin": origin,
            "Vary": "Origin",  # Ï∫êÏãú ÏïàÏ†ïÏÑ±
            "Access-Control-Allow-Credentials": "true",
            "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": request.headers.get("access-control-request-headers", "*"),
        }
    # ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏ Î∞ñÏù¥Î©¥ CORS Ìó§Îçî ÎØ∏Î∂ÄÏ∞©(Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Ï∞®Îã®)
    return {}

ACCOUNT_SERVICE_URL = os.getenv("ACCOUNT_SERVICE_URL")
CHATBOT_SERVICE_URL = os.getenv("CHATBOT_SERVICE_URL", "http://localhost:8003")
TIMEOUT = float(os.getenv("UPSTREAM_TIMEOUT", "20"))

@app.get("/health")
async def health(): 
    return {"status": "healthy", "service": "gateway"}

@app.options("/{path:path}")
async def options_handler(path: str, request: Request):
    """CORS preflight ÏßÅÏ†ë Ï≤òÎ¶¨(ÌïÑÏöî Ïãú)."""
    return Response(status_code=204, headers=cors_headers_for(request))

# ---- Îã®Ïùº ÌîÑÎ°ùÏãú Ïú†Ìã∏ ----
async def _proxy(request: Request, upstream_base: str, rest: str):
    url = upstream_base.rstrip("/") + "/" + rest.lstrip("/")
    logger.info(f"üîó ÌîÑÎ°ùÏãú ÏöîÏ≤≠: {request.method} {request.url.path} -> {url}")

    # ÏõêÎ≥∏ ÏöîÏ≤≠ Î≥µÏ†ú
    headers = dict(request.headers)
    headers.pop("host", None)
    body = await request.body()
    params = dict(request.query_params)

    try:
        async with httpx.AsyncClient(timeout=TIMEOUT, follow_redirects=True) as client:
            upstream = await client.request(
                request.method, url, params=params, content=body, headers=headers
            )
            logger.info(f"‚úÖ ÌîÑÎ°ùÏãú ÏùëÎãµ: {upstream.status_code} {url}")
    except httpx.HTTPError as e:
        logger.error(f"‚ùå ÌîÑÎ°ùÏãú HTTP Ïò§Î•ò: {e} {url}")
        # ÏòàÏô∏Í∞Ä ÎÇòÎèÑ CORS Ìó§ÎçîÎäî Ìï≠ÏÉÅ Îã¨ÏïÑÏ§ÄÎã§
        return JSONResponse(
            status_code=502,
            content={"error": "Bad Gateway", "detail": str(e)},
            headers=cors_headers_for(request),
        )
    except Exception as e:
        logger.error(f"‚ùå ÌîÑÎ°ùÏãú ÏùºÎ∞ò Ïò§Î•ò: {e} {url}")
        return JSONResponse(
            status_code=500,
            content={"error": "Gateway Error", "detail": str(e)},
            headers=cors_headers_for(request),
        )

    # ÏóÖÏä§Ìä∏Î¶º ÏùëÎãµ Ï†ÑÎã¨
    passthrough = {}
    for k, v in upstream.headers.items():
        lk = k.lower()
        if lk in ("content-type", "set-cookie", "cache-control"):
            passthrough[k] = v

    # CORS Ìó§ÎçîÎ•º Î™ÖÏãúÏ†ÅÏúºÎ°ú ÎçÆÏñ¥Ïì¥Îã§(Ìï≠ÏÉÅ Î∂ÄÏ∞©)
    passthrough.update(cors_headers_for(request))

    return Response(
        content=upstream.content,
        status_code=upstream.status_code,
        headers=passthrough,
        media_type=upstream.headers.get("content-type"),
    )

# ---- account-service ÌîÑÎ°ùÏãú ----
@app.api_route("/api/account/{path:path}", methods=["GET","POST","PUT","PATCH","DELETE"])
async def account_any(path: str, request: Request):
    # /api/account/signup -> /signupÎ°ú Î≥ÄÌôò
    return await _proxy(request, ACCOUNT_SERVICE_URL, path)

# ---- chatbot-service ÌîÑÎ°ùÏãú ----
@app.api_route("/api/chatbot", methods=["GET","POST","PUT","PATCH","DELETE"])
async def chatbot_root(request: Request):
    return await _proxy(request, CHATBOT_SERVICE_URL, "/")

@app.api_route("/api/chatbot/{path:path}", methods=["GET","POST","PUT","PATCH","DELETE"])
async def chatbot_any(path: str, request: Request):
    return await _proxy(request, CHATBOT_SERVICE_URL, path)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
